library(rJava)
library(SnowballC)
library(tm)
library(data.table)
bigram=fread("big.csv")
trigram=fread("trig.csv")
quangram=fread("quang.csv")

fprofane=file("/Users/daxinggao/Desktop/profanity.txt")
profane=VectorSource(readLines(fprofane,warn=F))
close(fprofane)

clean_sentence<-function(sentence){
  docs=Corpus(VectorSource(c(sentence)))
  docs=tm_map(docs,content_transformer(tolower))
  docs=tm_map(docs,removePunctuation)
  docs=tm_map(docs, removeNumbers)
  docs=tm_map(docs,stripWhitespace)
  docs=tm_map(docs,removeWords,profane$content[-1])
  docs=tm_map(docs,removeWords,stopwords("english"))
  ##docs=tm_map(docs, stemDocument)
  docs=tm_map(docs,PlainTextDocument)
  docs=as.character(docs[[1]])
  words=strsplit(docs,"\\s+")[[1]]
  uniword=words[length(words)]
  biword=words[(length(words)-1):length(words)]
  biword=paste(biword,collapse=" ")
  triword=words[(length(words)-2):length(words)]
  triword=paste(triword,collapse=" ")
  ##biword2=paste(words[(length(words)-2)],words[length(words)],collapse=" ")
  return(list(uniword,biword,triword))
}

calculatep<-function(uniword,biwords,triwords){
  
  predict=quangram[words==triwords]$prediction
  predict=c(predict,trigram[words==biwords]$prediction)
  predict=c(predict,bigram[words==uniword]$prediction)
  if(length(predict)==0){predict=c("")}
  return(unique(predict))
}

predictword<-function(sentence,candidates=NULL){
  lis=clean_sentence(sentence)
  r=calculatep(lis[[1]],lis[[2]],lis[[3]])
  if(!is.null(candidates)){
    return(r[r%in%candidates])
  }
  else return(r[1:5])
}
